from telebot import types
import time
import database

#
#   Messages
#
poll_message = \
    "[{0}](tg://user?id={1}) –∑–∞–ø—É—Å—Ç–∏–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –±–∞–Ω "\
    "[{2}](tg://user?id={3}).\n\n"\
    "–ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ *{2}* –Ω–∞—Ä—É—à–∏–ª(–∞) –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞, –∂–º–∏ *\"–î–∞\"*. "\
    "–ò–Ω–∞—á–µ - –∂–º–∏ *\"–ù–µ—Ç\"*.\n\n"\
    "*–ü—Ä–∏—á–∏–Ω–∞:* {4}\n\n"\
    "*–°–æ–æ–±—â–µ–Ω–∏–µ:* {5}"

voteban_error_poll_already_created = \
    "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –±–∞–Ω [{0}](tg://user?id={1}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."\
    "\n\n–Ø –ø–µ—Ä–µ—à–ª—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –µ–≥–æ –ø–æ—Ç–µ—Ä—è–ª–∏."

voteban_error_no_reply = \
    "–í—ã–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞, "\
    "–∏ –æ—Ç–≤–µ—Ç—å –µ–º—É –∫–æ–º–∞–Ω–¥–æ–π:\n"\
    "`/spam` - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º\n"\
    "`/offense` - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞"

voteban_error_self_complaint = \
    "–í–∞–Ω–≥—É—é, —Ç—ã –∏ –ª–∞–π–∫–∏ —Ç–æ–∂–µ —Å–∞–º —Å–µ–±–µ —Å—Ç–∞–≤–∏—à—å üåö"

voteban_error_bot_complaint = \
    "–Ø - –±–µ–∑–¥—É—à–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞. –ß—Ç–æ —Ç—ã –∫–æ –º–Ω–µ –ø—Ä–∏—Å—Ç–∞–ª? ü§ñ"

voteban_error_admin_complaint = \
    "–¢—ã –Ω–∞ –∫–æ–≥–æ –±–∞—Ç–æ–Ω –∫—Ä–æ—à–∏—à—å? –ü—Ä–æ–±–ª–µ–º –∑–∞—Ö–æ—Ç–µ–ª? ü•ñ"

callback_message = \
    "–¢–≤–æ–π –≥–æ–ª–æ—Å: {0}"

callback_error_no_poll = \
    "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ."

callback_error_vote_counted = \
    "–¢–≤–æ–π –≥–æ–ª–æ—Å —É–∂–µ —É—á—Ç—ë–Ω."

result_message_innocent = \
    "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–µ—à–∏–ª–æ, —á—Ç–æ [{0}](tg://user?id={1}) "\
    "–Ω–µ –Ω–∞—Ä—É—à–∞–ª(–∞) –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ.\n\n"\
    "*C–æ–æ–±—â–µ–Ω–∏–µ:* {2}"

result_message_guilty = \
    "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–µ—à–∏–ª–æ, —á—Ç–æ [{0}](tg://user?id={1}) "\
    "–Ω–∞—Ä—É—à–∏–ª(–∞) –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ.\n\n"\
    "*C–æ–æ–±—â–µ–Ω–∏–µ:* {2}\n\n"\
    "*–ù–∞–∫–∞–∑–∞–Ω–∏–µ:* {3}"


#
#   Keyboard method
#
def create_poll_keyboard(votes_for_amount=0, votes_against_amount=0):
    keyboard = types.InlineKeyboardMarkup()
    button_yes = types.InlineKeyboardButton(
        text="–î–∞: {}".format(votes_for_amount),
        callback_data="vote_for",
    )
    button_no = types.InlineKeyboardButton(
        text="–ù–µ—Ç: {}".format(votes_against_amount),
        callback_data="vote_against",
    )
    keyboard.add(button_yes)
    keyboard.add(button_no)
    return keyboard


#
#   Verify method
#
def can_poll(bot, message):
    if not message.reply_to_message:
        return {
            "error": "no_reply",
        }

    accused_id = message.reply_to_message.from_user.id      # ID –û–±–≤–∏–Ω—è–µ–º—ã–π
    accuser_id = message.from_user.id                       # ID –û–±–≤–∏–Ω–∏—Ç–µ–ª—å
    admins = bot.get_chat_administrators(message.chat.id)
    admins_id = [admin.user.id for admin in admins]
    bot_id = bot.get_me().id
    poll = database.check_poll(
        chat_id=message.chat.id,
        accused_id=accused_id,
    )

    if poll:
        return {
            "error": "poll_already_created",
            "message": poll.message_id,
        }
    elif accused_id == accuser_id:
        return {
            "error": "self_complaint",
        }
    elif accused_id == bot_id:
        return {
            "error": "bot_complaint",
        }
    elif accused_id in admins_id:
        return {
            "error": "admin_complaint",
        }
    else:
        return {
            "error": None,
        }


#
#   Handle methods
#
def handle_voteban(bot, message, reason):
    if not (message.chat.type == "supergroup"):
        return False

    user_can_poll = can_poll(bot, message)

    if user_can_poll["error"] == "no_reply":
        bot.reply_to(
            message=message,
            text=voteban_error_no_reply,
            parse_mode="markdown",
        )
        return False

    accused_id = message.reply_to_message.from_user.id
    accused_full_name = "{} {}".format(
        message.reply_to_message.from_user.first_name,
        message.reply_to_message.from_user.last_name,
    )
    accuser_id = message.from_user.id
    accuser_full_name = "{} {}".format(
        message.from_user.first_name,
        message.from_user.last_name,
    )

    if user_can_poll["error"] == "poll_already_created":
        bot.send_message(
            chat_id=message.chat.id,
            text=voteban_error_poll_already_created.format(
                accused_full_name,
                accused_id,
            ),
            reply_to_message_id=user_can_poll["message"],
            parse_mode="markdown",
        )
        return False

    if user_can_poll["error"] == "self_complaint":
        bot.reply_to(
            message=message,
            text=voteban_error_self_complaint,
            parse_mode="markdown",
        )
        return False

    if user_can_poll["error"] == "bot_complaint":
        bot.reply_to(
            message=message,
            text=voteban_error_bot_complaint,
            parse_mode="markdown",
        )
        return False

    if user_can_poll["error"] == "admin_complaint":
        bot.reply_to(
            message=message,
            text=voteban_error_admin_complaint,
            parse_mode="markdown",
        )
        return False

    if not user_can_poll["error"]:
        sended_message = bot.send_message(
            chat_id=message.chat.id,
            text=poll_message.format(
                accuser_full_name,
                accuser_id,
                accused_full_name,
                accused_id,
                "–°–ø–∞–º" if reason == "spam" else "-",
                message.reply_to_message.text if reason != "spam" else "-",
            ),
            parse_mode="markdown",
            reply_markup=create_poll_keyboard()
        )

        user_message = message.reply_to_message.text

        database.create_poll(
            chat_id=sended_message.chat.id,
            message_id=sended_message.message_id,
            accuser_id=accuser_id,
            accused_id=accused_id,
            message=user_message if user_message else "-",
            reason=reason
        )
        return True

    return False


def handle_callback_vote(bot, call):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∏
    poll = database.get_poll(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
    )

    if not poll:
        bot.answer_callback_query(
            callback_query_id=call.id,
            text=callback_error_no_poll,
            show_alert=True,
        )
        return False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
    vote = database.get_vote(
        poll_id=poll.id,
        voted_id=call.from_user.id,
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
    if not vote:
        database.create_vote(
            poll_id=poll.id,
            voted_id=call.from_user.id,
            to_ban=(call.data == "vote_for"),
        )
    elif (
        (vote.to_ban and call.data == "vote_for") or
        (not vote.to_ban and call.data == "vote_against")
    ):
        bot.answer_callback_query(
            callback_query_id=call.id,
            text=callback_error_vote_counted,
            show_alert=False,
        )
        return True
    else:
        database.update_vote(
            id=vote.id,
            to_ban=(call.data == "vote_for"),
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    poll_results = database.get_poll_results(
        poll_id=poll.id,
    )

    # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=create_poll_keyboard(
            votes_for_amount=poll_results["votes_for_amount"],
            votes_against_amount=poll_results["votes_against_amount"],
        ),
    )

    # –ù–æ—Ç–∏—Ñ–∏–∫–µ–π—à–Ω –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –æ—Ç–≤–µ—Ç–∞
    bot.answer_callback_query(
        callback_query_id=call.id,
        text=callback_message.format(
            "–î–∞" if call.data == "vote_for" else "–ù–µ—Ç"
        ),
        show_alert=False,
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    settings = database.get_settings(
        chat_id=call.message.chat.id
    )

    # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è - –≤—ã—Ö–æ–¥
    if (
        (poll_results["votes_for_amount"] < settings.votes_for_decision) and
        (poll_results["votes_against_amount"] < settings.votes_for_decision)
    ):
        return True

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ–± –æ–±–≤–∏–Ω—è–µ–º–æ–º
    accused = bot.get_chat_member(
        chat_id=call.message.chat.id,
        user_id=poll.accused_id,
    )
    accused_full_name = "{} {}".format(
        accused.user.first_name,
        accused.user.last_name,
    )

    # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –ø—Ä–æ—Ç–∏–≤ - –≤—ã—Ö–æ–¥
    if (poll_results["votes_against_amount"] >= settings.votes_for_decision):
        bot.send_message(
            chat_id=call.message.chat.id,
            text=result_message_innocent.format(
                accused_full_name,
                poll.accused_id,
                poll.message,
            ),
            parse_mode="markdown",
        )
        bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=poll.message_id,
        )
        database.delete_poll(poll.id)
        return True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è
    punishment = "ban" if poll.reason == "spam" else settings.punishment

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
    if (punishment == "ban"):
        bot.kick_chat_member(
            chat_id=call.message.chat.id,
            user_id=poll.accused_id,
            until_date=time.time(),
        )
    elif (punishment == "kick"):
        bot.kick_chat_member(
            chat_id=call.message.chat.id,
            user_id=poll.accused_id,
            until_date=time.time() + 60,
        )
    else:
        bot.restrict_chat_member(
            chat_id=call.message.chat.id,
            user_id=poll.accused_id,
            until_date=time.time()+settings.days*86400,
        )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏
    bot.send_message(
        chat_id=call.message.chat.id,
        text=result_message_guilty.format(
            accused_full_name,
            poll.accused_id,
            "–°–ø–∞–º" if poll.reason == "spam" else poll.message,
            punishment,
        ),
        parse_mode="markdown",
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–æ–π
    bot.delete_message(
        chat_id=call.message.chat.id,
        message_id=poll.message_id,
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∏
    database.delete_poll(poll.id)

    return True
